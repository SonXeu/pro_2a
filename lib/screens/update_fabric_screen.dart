import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import '../models/fabric.dart';
import '../services/fabric_service.dart';
import '../services/storage_service.dart';

class UpdateFabricScreen extends StatefulWidget {
  final String fabricId;

  UpdateFabricScreen({required this.fabricId});

  @override
  _UpdateFabricScreenState createState() => _UpdateFabricScreenState();
}

class _UpdateFabricScreenState extends State<UpdateFabricScreen> {
  final _nameController = TextEditingController();
  final _categoryController = TextEditingController();
  final _materialController = TextEditingController();
  final _quantityController = TextEditingController();
  File? _imageFile;
  String? _imageUrl; // L∆∞u tr·ªØ URL ·∫£nh hi·ªán t·∫°i
  final ImagePicker _picker = ImagePicker();
  bool _isLoading = true; // Tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu

  @override
  void initState() {
    super.initState();
    _loadFabricData();
  }

  // üü¢ T·∫£i d·ªØ li·ªáu m·∫´u v·∫£i t·ª´ Firestore
  Future<void> _loadFabricData() async {
    Fabric? fabric = await FabricService().getFabricById(widget.fabricId);
    if (fabric != null) {
      setState(() {
        _nameController.text = fabric.name;
        _categoryController.text = fabric.category;
        _materialController.text = fabric.material;
        _quantityController.text = fabric.quantity.toString();
        _imageUrl = fabric.imageUrl;
        _isLoading = false; // D·ªØ li·ªáu ƒë√£ t·∫£i xong
      });
    } else {
      setState(() {
        _isLoading = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Kh√¥ng t√¨m th·∫•y m·∫´u v·∫£i!")));
      Navigator.pop(context);
    }
  }

  // üì∏ M·ªü th∆∞ vi·ªán ·∫£nh ƒë·ªÉ ch·ªçn ·∫£nh m·ªõi
  Future<void> _pickImage() async {
    final pickedFile = await _picker.pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _imageFile = File(pickedFile.path);
      });
    }
  }

  // üü¢ C·∫≠p nh·∫≠t m·∫´u v·∫£i
  Future<void> _updateFabric() async {
    if (_nameController.text.isEmpty || _categoryController.text.isEmpty ||
        _materialController.text.isEmpty || _quantityController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")));
      return;
    }

    String imageUrl = _imageUrl ?? ''; // Gi·ªØ ·∫£nh c≈© n·∫øu kh√¥ng thay ƒë·ªïi

    if (_imageFile != null) {
      // N·∫øu c√≥ ·∫£nh m·ªõi, t·∫£i l√™n Firebase Storage
      imageUrl = await StorageService().uploadImage(_imageFile!);
      if (imageUrl.isEmpty) {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("L·ªói t·∫£i ·∫£nh, th·ª≠ l·∫°i!")));
        return;
      }
    }

    Fabric updatedFabric = Fabric(
      id: widget.fabricId,
      name: _nameController.text,
      category: _categoryController.text,
      material: _materialController.text,
      quantity: int.parse(_quantityController.text),
      imageUrl: imageUrl,
    );

    await FabricService().updateFabric(widget.fabricId, updatedFabric);
    Navigator.pop(context);
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text("C·∫≠p nh·∫≠t th√†nh c√¥ng!")));
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return Scaffold(
        appBar: AppBar(title: Text('C·∫≠p nh·∫≠t m·∫´u v·∫£i')),
        body: Center(child: CircularProgressIndicator()), // Hi·ªÉn th·ªã v√≤ng tr√≤n t·∫£i d·ªØ li·ªáu
      );
    }

    return Scaffold(
      appBar: AppBar(title: Text('C·∫≠p nh·∫≠t m·∫´u v·∫£i')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _nameController,
              decoration: InputDecoration(labelText: 'T√™n m·∫´u v·∫£i'),
            ),
            TextField(
              controller: _categoryController,
              decoration: InputDecoration(labelText: 'Lo·∫°i v·∫£i'),
            ),
            TextField(
              controller: _materialController,
              decoration: InputDecoration(labelText: 'Ch·∫•t li·ªáu'),
            ),
            TextField(
              controller: _quantityController,
              decoration: InputDecoration(labelText: 'S·ªë l∆∞·ª£ng'),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _pickImage,
              child: Text('Ch·ªçn ·∫£nh m·ªõi'),
            ),
            SizedBox(height: 10),
            _imageFile != null
                ? Image.file(_imageFile!, height: 150) // Hi·ªÉn th·ªã ·∫£nh m·ªõi ch·ªçn
                : (_imageUrl != null && _imageUrl!.isNotEmpty
                ? Image.network(_imageUrl!, height: 150) // Hi·ªÉn th·ªã ·∫£nh c≈© n·∫øu kh√¥ng ƒë·ªïi
                : Container()),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _updateFabric,
              child: Text('L∆∞u c·∫≠p nh·∫≠t'),
            ),
          ],
        ),
      ),
    );
  }
}
